
/*
 * Skeleton (We know where we are going)
 *
 * Raffle COntract
 *
 * 1. Enter the lottery (paying some amt)
 * 2. Pick Random Winner (Verifiably random)
 * 3. Winner to be selected every X minites/months -> completely automated/no maintance
 *    automatically run forever
 * ChainLink oracles -> Randomness, Automated Execution (ChainLink Keepers)
 */

       /** Events
         * When ever update any dynamic entities like array / mapping we should emmit "events"
         * Events alloes you to "print" stuff to this log (type of special data structure)
         * Events and Logs live in special data structure that is not accessible by Smart Contracts
         * so it is cheaper
         * so we can print some stuff which are important to us w/o having to store in storage
         * variable which take much more gas
         * each one of the events are tied to smart contract or account address that emitted that
         * events in these transactions, listening for these events is helpful
         * events have two keyword 1.Indexed parameters 2.NonIndexed parameters
         * you can have Upto "3" Indexed Parameters , also known as "Topics"
         * so when we see Tpoic then it will be Indexed parameters
         * Indexed parameters are searchable
         * NonIndexed parameters are harder to search as they are abi encoded so you need abi to decode * them
         * "emit" the event, this will store data into logging Data Structure
         * NonIndexed parameters will be data in etherScan, cost less gas
         * we can see after we verify in etherScan
         * Name events with the function name reversed  
         *   
         */

               /***************** Chainlink VRF *************************/
        All about Chainlink VRF2 https://docs.chain.link/vrf/v2/introduction/

- The parameters define how your requests will be processed. You can find the values for your network in the Configuration page(https://docs.chain.link/vrf/v2/subscription/supported-networks/).

   =>uint64 s_subscriptionId: The subscription ID that this contract uses for funding requests.
   
   => bytes32 keyHash: The gas lane key hash value, which is the maximum gas price you are willing to pay for a request in wei. It functions as an ID of the off-chain VRF job that runs in response to requests.
   
   => uint32 callbackGasLimit: The limit for how much gas to use for the callback request to your contractâ€™s fulfillRandomWords() function. It must be less than the maxGasLimit limit on the coordinator contract. Adjust this value for larger requests depending on how your fulfillRandomWords() function processes and stores the received random values. If your callbackGasLimit is not sufficient, the callback will fail and your subscription is still charged for the work done to generate your requested random values.
   
   => uint16 requestConfirmations: How many confirmations the Chainlink node should wait before responding. The longer the node waits, the more secure the random value is. It must be greater than the minimumRequestBlockConfirmations limit on the coordinator contract.
   
   => uint32 numWords: How many random values to request. If you can use several random values in a single callback, you can reduce the amount of gas that you spend per random value. The total cost of the callback request depends on how your fulfillRandomWords() function processes and stores the received random values, so adjust your callbackGasLimit accordingly.
   
   -The contract includes the following functions:

    =>requestRandomWords(): Takes your specified parameters and submits the request to the VRF coordinator contract.
    
    =>fulfillRandomWords(): Receives random values and stores them with your contract.
    
    =>getRequestStatus(): Retrive request details for a given _requestId.


    /***************** Chainlink Keepers (Automation)*************************/

    https://docs.chain.link/chainlink-automation/compatible-contracts/

    to use keepers we need 2 functions checkUpKeep and peformUpKeep 
    and import contract alsoðŸ˜…

checkUpkeep	=> Runs off-chain at every block to determine if the performUpkeep function should be called on-chain.
performUpkeep =>	Contains the logic that should be executed on-chain when checkUpkeep returns true.

/****Enums*****/

it can be used to create custom types with a finite set of "constant values"
eg.  enum State { Created, Locked, Inactive} 


            /*********************** Raffle Deployment *************************/
=> create deploy folder 
=> vrfCoordinatorV2 is contract so we need to deploy mock for it , as it is outside of our project
=> 01-depoly-raffle.js 
=> in hardhat.config.js in module exports
      namedAccounts: {
        deployer: {
            default: 0,
        },
        player: {
            default: 1,
        },
    },

=> as we want to deploy mocks we created helper-hardhat-config.js
=> 00-deploy-mocks.js
=> in contract folder test > VRFCoordinatorV2Mock.sol
now we have mock contract we can depoly it 

=> Verification  
   utils > verify.js (copy paste from last project or GitHub)

=> Tests

=> we should have unit tests before we deploy on "testnets"

"0x" and [] => empty bytes object hardhat is smart

 had to remove onlyValidConsumer in VRFCoordinatorV2Mock in request random word 